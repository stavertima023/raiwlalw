'use client';

import * as React from 'react';
import useSWR, { mutate } from 'swr';
import { Order, OrderStatus, User, Expense, Payout, PayoutStatus, Debt, PayoutWithOrders } from '@/lib/types';
import { useToast } from '@/hooks/use-toast';
import { AppLayout } from '@/components/layout/AppLayout';
import { Dashboard } from '@/components/dashboard/Dashboard';
import { PrinterDashboard } from '@/components/printer/PrinterDashboard';
import { AdminOrderList } from '@/components/admin/AdminOrderList';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { ExpensesList } from '@/components/admin/ExpensesList';
import { PayoutsList } from '@/components/admin/PayoutsList';
import AIAnalytics from '@/components/admin/AIAnalytics';
import { Analytics } from '@/components/admin/Analytics';
import { optimizedFetcher, swrConfig, cacheManager, getCacheStatus } from '@/lib/cache';
import { Button } from '@/components/ui/button';

type DashboardRootProps = {
  initialUser: Omit<User, 'password_hash'> | undefined;
}

export default function DashboardRoot({ initialUser }: DashboardRootProps) {
  if (!initialUser) {
    return null;
  }

  const { toast } = useToast();
  const [errorCount, setErrorCount] = React.useState(0);
  const [lastErrorTime, setLastErrorTime] = React.useState(0);
  const [isInitialized, setIsInitialized] = React.useState(false);

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  React.useEffect(() => {
    if (isInitialized) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setIsInitialized(true);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    cacheManager.clear();
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        console.log('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      } else {
        console.log('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—à–ª–æ –≤ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º');
      }
    };

    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      console.log('üõ°Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞');
      e.preventDefault();
      e.returnValue = '';
    };

    const handlePageHide = () => {
      console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    };

    const handlePageShow = () => {
      console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const handleTouchStart = () => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('pagehide', handlePageHide);
    window.addEventListener('pageshow', handlePageShow);
    document.addEventListener('touchstart', handleTouchStart, { passive: true });

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('pagehide', handlePageHide);
      window.removeEventListener('pageshow', handlePageShow);
      document.removeEventListener('touchstart', handleTouchStart);
    };
  }, [isInitialized]);

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
  const handleError = React.useCallback((error: Error, type: string) => {
    const now = Date.now();
    if (now - lastErrorTime < 10000) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 10 —Å–µ–∫—É–Ω–¥
      return;
    }
    
    setLastErrorTime(now);
    setErrorCount(prev => prev + 1);
    
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${type}:`, error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–∏ –∏ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    if (errorCount === 0) {
      let errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      if (error.message.includes('500')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
      } else if (error.message.includes('QuotaExceededError')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.';
      } else if (error.message.includes('18.06MB')) {
        errorMessage = '–î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.';
      }
      
      toast({ 
        title: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${type}`, 
        description: errorMessage, 
        variant: 'destructive',
        duration: 5000, // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞
      });
    }
  }, [toast, errorCount, lastErrorTime]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  React.useEffect(() => {
    const timer = setTimeout(() => {
      setErrorCount(0);
    }, 60000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥

    return () => clearTimeout(timer);
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  React.useEffect(() => {
    if (!isInitialized) return;
    
    const status = getCacheStatus();
    console.log('üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞:', status);
  }, [isInitialized]);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  const { data: orders = [], error: ordersError, isLoading: ordersLoading, mutate: mutateOrders } = useSWR<Order[]>(
    isInitialized ? '/api/orders' : null, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    optimizedFetcher, 
    {
      ...swrConfig,
      fallbackData: cacheManager.get('orders') || [],
      onError: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        handleError(error, '–∑–∞–∫–∞–∑–æ–≤');
      },
      onSuccess: (data) => {
        console.log(`‚úÖ –ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: ${data.length} —à—Ç. –¥–ª—è ${initialUser.role}`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
        if (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' && data.length > 500) {
          toast({
            title: '–ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
            description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∑–∞–∫–∞–∑–æ–≤ (–≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Å–∏—Å—Ç–µ–º–µ)`,
            duration: 3000,
          });
        }
      },
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
      revalidateOnMount: isInitialized,
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫
      shouldRetryOnError: false,
      errorRetryCount: 0,
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∫—ç—à–∞
      onErrorRetry: (error, key, config, revalidate, { retryCount }) => {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ${retryCount}:`, error);
        // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        return;
      },
    }
  );
  
  const { data: expenses = [], error: expensesError, mutate: mutateExpenses } = useSWR<Expense[]>(
    (isInitialized && initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') ? '/api/expenses' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('expenses') || [],
      onError: (error) => handleError(error, '—Ä–∞—Å—Ö–æ–¥–æ–≤'),
      revalidateOnMount: isInitialized,
      shouldRetryOnError: false,
      errorRetryCount: 0,
    }
  );

  const { data: payouts = [], error: payoutsError, mutate: mutatePayouts } = useSWR<PayoutWithOrders[]>(
    (isInitialized && (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' || initialUser.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü')) ? '/api/payouts' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: [], // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è payouts
      onError: (error) => handleError(error, '–≤—ã–≤–æ–¥–æ–≤'),
      revalidateOnMount: isInitialized,
      shouldRetryOnError: false,
      errorRetryCount: 0,
    }
  );

  const { data: debts = [], error: debtsError, mutate: mutateDebts } = useSWR<Debt[]>(
    (isInitialized && initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') ? '/api/debts' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('debts') || [],
      onError: (error) => handleError(error, '–¥–æ–ª–≥–æ–≤'),
      revalidateOnMount: isInitialized,
      shouldRetryOnError: false,
      errorRetryCount: 0,
    }
  );

  const { data: users = [], error: usersError, mutate: mutateUsers } = useSWR<User[]>(
    (isInitialized && initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') ? '/api/users' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('users') || [],
      onError: (error) => handleError(error, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
      revalidateOnMount: isInitialized,
      shouldRetryOnError: false,
      errorRetryCount: 0,
    }
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleRefreshAll = React.useCallback(async () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      cacheManager.clear();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      await Promise.all([
        mutateOrders(),
        mutateExpenses(),
        mutatePayouts(),
        mutateDebts(),
        mutateUsers(),
      ]);
      
      toast({
        title: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        description: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
        variant: 'destructive',
      });
    }
  }, [mutateOrders, mutateExpenses, mutatePayouts, mutateDebts, mutateUsers, toast]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const handleAddOrder = React.useCallback(async (newOrderData: Omit<Order, 'id' | 'orderDate' | 'seller'>) => {
    try {
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
      ...newOrderData,
          seller: initialUser.username,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }

      const newOrder = await response.json();
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      mutate('/api/orders', (currentOrders: Order[] = []) => [newOrder, ...currentOrders], false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const currentOrders = (cacheManager.get('orders') as Order[]) || [];
      cacheManager.set('orders', [newOrder, ...currentOrders]);
      
      toast({
        title: '–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω',
        description: `–ó–∞–∫–∞–∑ #${newOrder.orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  }, [initialUser.username, toast]);

  const handleUpdateOrderStatus = React.useCallback(async (orderId: string, newStatus: OrderStatus) => {
    try {
      const response = await fetch(`/api/orders/${orderId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      }

      const updatedOrder = await response.json();
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      mutate('/api/orders', (currentOrders: Order[] = []) => 
        currentOrders.map(order => 
          order.id === orderId ? { ...order, status: newStatus, ready_at: updatedOrder.ready_at } : order
        ), false
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const currentOrders = (cacheManager.get('orders') as Order[]) || [];
      const updatedOrders = currentOrders.map((order: Order) => 
        order.id === orderId ? { ...order, status: newStatus, ready_at: updatedOrder.ready_at } : order
      );
      cacheManager.set('orders', updatedOrders);
      
      toast({
        title: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
        description: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus}"`,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
        variant: 'destructive',
      });
    }
  }, [toast]);

  const handleAddExpense = React.useCallback(async (newExpenseData: Omit<Expense, 'id' | 'date'>) => {
    try {
      const response = await fetch('/api/expenses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newExpenseData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞');
      }

      const newExpense = await response.json();
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      mutate('/api/expenses', (currentExpenses: Expense[] = []) => [newExpense, ...currentExpenses], false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const currentExpenses = (cacheManager.get('expenses') as Expense[]) || [];
      cacheManager.set('expenses', [newExpense, ...currentExpenses]);
      
      toast({
        title: '–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω',
        description: `–†–∞—Å—Ö–æ–¥ –Ω–∞ ${newExpense.amount} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  }, [toast]);

  const handleDebtUpdate = React.useCallback(() => {
    mutate('/api/debts');
  }, []);

  const handleUpdatePayoutStatus = React.useCallback(async (payoutId: string, newStatus: PayoutStatus) => {
    try {
      const response = await fetch(`/api/payouts/${payoutId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã');
      }

      const updatedPayout = await response.json();
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      mutate('/api/payouts', (currentPayouts: Payout[] = []) => 
        currentPayouts.map(payout => 
          payout.id === payoutId ? { ...payout, status: newStatus } : payout
        ), false
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const currentPayouts = (cacheManager.get('payouts') as Payout[]) || [];
      const updatedPayouts = currentPayouts.map((payout: Payout) => 
        payout.id === payoutId ? { ...payout, status: newStatus } : payout
      );
      cacheManager.set('payouts', updatedPayouts);
      
      toast({
        title: '–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω',
        description: `–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus}"`,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã',
        variant: 'destructive',
      });
    }
  }, [toast]);

  const handleCancelOrder = React.useCallback((orderNumber: string) => {
    const order = orders.find(o => o.orderNumber === orderNumber);
    if (order?.id) {
      handleUpdateOrderStatus(order.id, '–û—Ç–º–µ–Ω–µ–Ω');
    }
  }, [orders, handleUpdateOrderStatus]);

  const handleReturnOrder = React.useCallback((orderNumber: string) => {
    const order = orders.find(o => o.orderNumber === orderNumber);
    if (order?.id) {
      handleUpdateOrderStatus(order.id, '–í–æ–∑–≤—Ä–∞—Ç');
    }
  }, [orders, handleUpdateOrderStatus]);

  const handlePayout = React.useCallback(async (orderNumbers: string[]) => {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã
      const payoutOrders = orders.filter(order => orderNumbers.includes(order.orderNumber));
      const totalAmount = payoutOrders.reduce((sum, order) => sum + order.price, 0);
      
      const response = await fetch('/api/payouts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderNumbers,
          seller: initialUser.username,
          amount: totalAmount,
          orderCount: orderNumbers.length,
          status: 'pending',
          comment: '',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || errorData.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
      }

      const newPayout = await response.json();
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      mutate('/api/payouts', (currentPayouts: Payout[] = []) => [newPayout, ...currentPayouts], false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const currentPayouts = (cacheManager.get('payouts') as Payout[]) || [];
      cacheManager.set('payouts', [newPayout, ...currentPayouts]);
      
      toast({
        title: '–í—ã–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞',
        description: `–í—ã–ø–ª–∞—Ç–∞ –Ω–∞ ${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  }, [initialUser.username, orders, toast]);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const findOrder = React.useCallback((orderNumber: string) => {
    return orders.find(order => order.orderNumber === orderNumber);
  }, [orders]);

  const findOrders = React.useCallback((orderNumbers: string[]) => {
    return orders.filter(order => orderNumbers.includes(order.orderNumber));
  }, [orders]);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const PlaceholderComponent = React.memo(({ title, description }: { title: string, description: string }) => (
    <div className="flex items-center justify-center min-h-[400px]">
      <Card className="w-full max-w-md">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
      </CardContent>
    </Card>
    </div>
  ));

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (initialUser.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
  return (
      <AppLayout currentUser={initialUser}>
        {(activeView: string) => (
          <Dashboard
            user={initialUser}
            orders={orders || []}
            isLoading={ordersLoading}
            onAddOrder={handleAddOrder} 
            onCancelOrder={handleCancelOrder}
            onReturnOrder={handleReturnOrder}
            onPayout={handlePayout}
            onUpdateStatus={handleUpdateOrderStatus}
            findOrder={findOrder}
            findOrders={findOrders}
          />
        )}
      </AppLayout>
    );
  }

  if (initialUser.role === '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫') {
    return (
      <AppLayout currentUser={initialUser}>
        {(activeView: string) => (
          <PrinterDashboard
            currentUser={initialUser}
            allOrders={orders || []}
            onUpdateStatus={handleUpdateOrderStatus}
            isLoading={ordersLoading}
          />
        )}
      </AppLayout>
    );
        }

  if (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
          return (
      <AppLayout currentUser={initialUser}>
        {(activeView: string) => {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
          if (ordersLoading && initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
            return (
              <div className="flex items-center justify-center min-h-[400px]">
                <Card className="w-full max-w-md">
                  <CardHeader>
                    <CardTitle>–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤</CardTitle>
                    <CardDescription>
                      –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    </div>
                    <p className="text-sm text-muted-foreground text-center mt-4">
                      –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
                    </p>
                  </CardContent>
                </Card>
              </div>
            );
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
          if (ordersError) {
            return (
              <div className="flex items-center justify-center min-h-[400px]">
                <Card className="w-full max-w-md">
                  <CardHeader>
                    <CardTitle>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</CardTitle>
                    <CardDescription>
                      –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Button onClick={handleRefreshAll} className="w-full">
                      –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </Button>
                  </CardContent>
                </Card>
              </div>
            );
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
          const safeOrders = orders || [];
          const safeUsers = users || [];
          const safeExpenses = expenses || [];
          const safePayouts = payouts || [];
          const safeDebts = debts || [];

          switch (activeView) {
            case 'admin-orders':
              return (
                <AdminOrderList 
                  allOrders={safeOrders} 
                  allUsers={safeUsers}
                  isLoading={ordersLoading}
                  onRefresh={handleRefreshAll}
                />
              );
            case 'admin-expenses':
              return (
                <ExpensesList 
                  allExpenses={safeExpenses} 
                  allUsers={safeUsers}
                  onAddExpense={handleAddExpense}
                  currentUser={initialUser}
                  debts={safeDebts}
                  onDebtUpdate={handleDebtUpdate}
                />
              );
            case 'admin-payouts':
              return (
                <PayoutsList 
                  allPayouts={safePayouts} 
                  allUsers={safeUsers}
                  onUpdateStatus={handleUpdatePayoutStatus}
                  currentUser={initialUser}
                  onRefresh={handleRefreshAll}
                  isLoading={ordersLoading}
                />
              );
            case 'admin-analytics':
              return (
                <Analytics 
                  orders={safeOrders} 
                  expenses={safeExpenses} 
                  payouts={safePayouts}
                  users={safeUsers}
                />
              );
            case 'admin-ai-analytics':
              return (
                <AIAnalytics 
                  orders={safeOrders} 
                  expenses={safeExpenses}
                />
              );
            default:
              return (
                <AdminOrderList 
                  allOrders={safeOrders} 
                  allUsers={safeUsers}
                  isLoading={ordersLoading}
                  onRefresh={handleRefreshAll}
                />
              );
          }
        }}
      </AppLayout>
    );
  }

  return (
    <AppLayout currentUser={initialUser}>
      {(activeView: string) => (
        <PlaceholderComponent 
          title="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å" 
          description="–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ" 
        />
      )}
    </AppLayout>
  );
}
