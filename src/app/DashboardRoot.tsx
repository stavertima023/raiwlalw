'use client';

import * as React from 'react';
import useSWR, { mutate } from 'swr';
import { Order, OrderStatus, User, Expense, Payout, PayoutStatus, Debt } from '@/lib/types';
import { useToast } from '@/hooks/use-toast';
import { AppLayout } from '@/components/layout/AppLayout';
import { Dashboard } from '@/components/dashboard/Dashboard';
import { PrinterDashboard } from '@/components/printer/PrinterDashboard';
import { AdminOrderList } from '@/components/admin/AdminOrderList';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { ExpensesList } from '@/components/admin/ExpensesList';
import { PayoutsList } from '@/components/admin/PayoutsList';
import AIAnalytics from '@/components/admin/AIAnalytics';
import { Analytics } from '@/components/admin/Analytics';
import { optimizedFetcher, swrConfig, cacheManager, getCacheStatus } from '@/lib/cache';
import { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';

type DashboardRootProps = {
  initialUser: Omit<User, 'password_hash'> | undefined;
}

export default function DashboardRoot({ initialUser }: DashboardRootProps) {
  if (!initialUser) {
    return null;
  }

  const { toast } = useToast();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  React.useEffect(() => {
    const status = getCacheStatus();
    console.log('üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞:', status);
  }, []);

  // --- –ü—Ä–æ–¥–∞–≤–µ—Ü: —Ä—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ ---
  const [ordersLoaded, setOrdersLoaded] = useState(false);
  const [ordersLoadingManual, setOrdersLoadingManual] = useState(false);

  // --- –ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫: —Ä–∞–∑–¥–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ---
  const [printerTab, setPrinterTab] = useState<'production'|'shipment'|'all'>('production');
  const [allOrdersLoaded, setAllOrdersLoaded] = useState(false);
  const [allOrdersLoading, setAllOrdersLoading] = useState(false);

  // –ó–∞–∫–∞–∑—ã –¥–ª—è "–ù–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å '–î–æ–±–∞–≤–ª–µ–Ω')
  const { data: productionOrders = [], error: productionError, isLoading: productionLoading, mutate: mutateProduction } = useSWR<Order[]>(
    initialUser.role === '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫' ? '/api/orders?status=–î–æ–±–∞–≤–ª–µ–Ω' : null,
    optimizedFetcher,
    { ...swrConfig }
  );

  // –ó–∞–∫–∞–∑—ã –¥–ª—è "–ù–∞ –æ—Ç–ø—Ä–∞–≤–∫—É" –∏ "–í—Å–µ –∑–∞–∫–∞–∑—ã" (–≤—Å–µ –∑–∞–∫–∞–∑—ã, —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ)
  const { data: allOrders = [], error: allOrdersError, isLoading: allOrdersLoadingSWR, mutate: mutateAllOrders } = useSWR<Order[]>(
    initialUser.role === '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫' && allOrdersLoaded ? '/api/orders' : null,
    optimizedFetcher,
    { ...swrConfig }
  );
  
  const { data: expenses = [], error: expensesError } = useSWR<Expense[]>(
    initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? '/api/expenses' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('expenses') || [],
    }
  );

  const { data: payouts = [], error: payoutsError } = useSWR<Payout[]>(
    (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' || initialUser.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') ? '/api/payouts' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('payouts') || [],
    }
  );

  const { data: debts = [], error: debtsError } = useSWR<Debt[]>(
    initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? '/api/debts' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('debts') || [],
    }
  );

  const { data: users = [], error: usersError } = useSWR<User[]>(
    initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? '/api/users' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('users') || [],
    }
  );

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  React.useEffect(() => {
    if (productionError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞:', productionError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞', 
        description: productionError.message, 
        variant: 'destructive' 
      });
    }
    if (allOrdersError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞:', allOrdersError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞', 
        description: allOrdersError.message, 
        variant: 'destructive' 
      });
    }
    if (expensesError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:', expensesError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤', 
        description: expensesError.message, 
        variant: 'destructive' 
      });
    }
    if (payoutsError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', payoutsError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤', 
        description: payoutsError.message, 
        variant: 'destructive' 
      });
    }
    if (debtsError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–≥–æ–≤:', debtsError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–≥–æ–≤', 
        description: debtsError.message, 
        variant: 'destructive' 
      });
    }
    if (usersError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 
        description: usersError.message, 
        variant: 'destructive' 
      });
    }
  }, [productionError, allOrdersError, expensesError, payoutsError, debtsError, usersError, toast]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –∫—ç—à–∞
  React.useEffect(() => {
    if (!productionLoading && productionOrders.length > 0) {
      const lastUpdate = cacheManager.getLastUpdate();
      const timeSinceUpdate = Date.now() - lastUpdate;
      
      if (timeSinceUpdate < 60000) { // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
        toast({ 
          title: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 
          description: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã', 
          duration: 2000
        });
      }
    }
    if (!allOrdersLoadingSWR && allOrders.length > 0) {
      const lastUpdate = cacheManager.getLastUpdate();
      const timeSinceUpdate = Date.now() - lastUpdate;
      
      if (timeSinceUpdate < 60000) { // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
        toast({ 
          title: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 
          description: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã', 
          duration: 2000
        });
      }
    }
  }, [productionLoading, productionOrders.length, allOrdersLoadingSWR, allOrders.length, toast]);

  // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const handleAddOrder = async (newOrderData: Omit<Order, 'id' | 'orderDate' | 'seller'>) => {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const tempOrder: Order = {
      id: `temp-${Date.now()}`,
      orderDate: new Date(),
      seller: initialUser.username,
      ...newOrderData,
    };

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –∏ –∫—ç—à
    mutate('/api/orders', (currentOrders: Order[] = []) => [tempOrder, ...currentOrders], false);
    cacheManager.set('orders', [tempOrder, ...allOrders]); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤

    try {
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newOrderData),
      });
      
      const responseData = await response.json();
      
      if (!response.ok) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        mutate('/api/orders');
        cacheManager.set('orders', allOrders); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫—ç—à –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        
        let errorMessage = responseData.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
        
        if (responseData.errors) {
          const errorDetails = responseData.errors.map((e: any) => {
            const field = e.path.join('.');
            const message = e.message;
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            const fieldNames: { [key: string]: string } = {
              'orderNumber': '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
              'shipmentNumber': '–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
              'productType': '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞',
              'size': '–†–∞–∑–º–µ—Ä',
              'price': '–¶–µ–Ω–∞',
              'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
              'photos': '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
            };
            const fieldName = fieldNames[field] || field;
            return `${fieldName}: ${message}`;
          }).join(', ');
          errorMessage += `: ${errorDetails}`;
        } else if (responseData.error) {
          errorMessage += `: ${responseData.error}`;
        }
        
        throw new Error(errorMessage);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫—ç—à
      mutate('/api/orders');
      toast({ title: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω' });
    } catch (error: any) {
      toast({ 
        title: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 
        description: error.message,
        variant: 'destructive' 
      });
    }
  };
  
  // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const handleUpdateOrderStatus = async (orderId: string, newStatus: OrderStatus) => {
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –∏ –∫—ç—à
    const updatedOrders = allOrders.map(order => 
      order.id === orderId ? { ...order, status: newStatus } : order
    );
    
    mutate('/api/orders', updatedOrders, false);
    cacheManager.set('orders', updatedOrders);

    try {
      const response = await fetch(`/api/orders/${orderId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus }),
      });
      
      if (!response.ok) {
        const err = await response.json();
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        mutate('/api/orders');
        cacheManager.set('orders', allOrders);
        throw new Error(err.message || 'Server error');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      mutate('/api/orders');
      toast({ 
        title: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', 
        description: `–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "${newStatus}".` 
      });
    } catch (error: any) {
      toast({ 
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 
        description: error.message, 
        variant: 'destructive' 
      });
    }
  };
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
  const handleAddExpense = async (newExpenseData: Omit<Expense, 'id' | 'date'>) => {
    try {
      const response = await fetch('/api/expenses', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newExpenseData),
      });
      
      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.message || 'Server error');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      mutate('/api/expenses');
      mutate('/api/debts');
      toast({ title: '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω' });
    } catch (error: any) {
      toast({ 
        title: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞', 
        description: error.message, 
        variant: 'destructive' 
      });
    }
  }

  const handleDebtUpdate = () => {
    mutate('/api/debts');
  };

  const handleUpdatePayoutStatus = async (payoutId: string, newStatus: PayoutStatus) => {
    try {
      const response = await fetch(`/api/payouts/${payoutId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus }),
      });
      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.message || 'Server error');
      }
      mutate('/api/payouts');
      toast({ title: '–°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } catch (error: any) {
      toast({ 
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 
        description: error.message, 
        variant: 'destructive' 
      });
    }
  }

  const handleCancelOrder = (orderNumber: string) => {
    const order = findOrder(orderNumber);
    if (order?.id) handleUpdateOrderStatus(order.id, '–û—Ç–º–µ–Ω–µ–Ω');
  };
  
  const handleReturnOrder = (orderNumber: string) => {
    const order = findOrder(orderNumber);
    if (order?.id) handleUpdateOrderStatus(order.id, '–í–æ–∑–≤—Ä–∞—Ç');
  };

  const handlePayout = async (orderNumbers: string[]) => {
    try {
      const selectedOrders = findOrders(orderNumbers);
      const totalAmount = selectedOrders.reduce((sum, order) => sum + order.price, 0);
      
      const payoutData = {
        orderNumbers,
        amount: totalAmount,
        orderCount: selectedOrders.length,
        seller: initialUser.username,
        comment: `–í—ã–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º: ${orderNumbers.join(', ')}`,
      };

      const response = await fetch('/api/payouts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payoutData),
      });

      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      mutate('/api/orders');
      mutate('/api/payouts');
      
      toast({ 
        title: '–í—ã–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞', 
        description: `–°–æ–∑–¥–∞–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É ${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ –ø–æ ${selectedOrders.length} –∑–∞–∫–∞–∑(–∞–º). –ó–∞–∫–∞–∑—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ "–ò—Å–ø–æ–ª–Ω–µ–Ω".` 
      });
    } catch (error: any) {
      toast({ 
        title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã', 
        description: error.message, 
        variant: 'destructive' 
      });
    }
  };

  // --- –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ---
  const handleLoadOrders = async () => {
    setOrdersLoadingManual(true);
    try {
      await mutateProduction(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º mutateProduction –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ productionOrders
      setOrdersLoaded(true);
    } finally {
      setOrdersLoadingManual(false);
    }
  };

  // --- –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞ ---
  const handleLoadAllOrders = async () => {
    setAllOrdersLoading(true);
    try {
      await mutateAllOrders();
      setAllOrdersLoaded(true);
    } finally {
      setAllOrdersLoading(false);
    }
  };

  // --- –î–ª—è –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤ ---
  const handlePrinterTabChange = (tab: 'production'|'shipment'|'all') => {
    setPrinterTab(tab);
  };

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
  const findOrder = React.useCallback((orderNumber: string): Order | undefined => {
    return allOrders.find((order: Order) => order.orderNumber === orderNumber);
  }, [allOrders]);
  
  const findOrders = React.useCallback((orderNumbers: string[]): Order[] => {
    return allOrders.filter((order: Order) => orderNumbers.includes(order.orderNumber));
  }, [allOrders]);

  const PlaceholderComponent = ({ title, description }: { title: string, description: string }) => (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <p>–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.</p>
      </CardContent>
    </Card>
  )

  if (initialUser.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
    return (
      <AppLayout currentUser={initialUser}>
        {() => (
          <Dashboard
            user={initialUser}
            orders={allOrders}
            isLoading={ordersLoadingManual || allOrdersLoadingSWR}
            onAddOrder={handleAddOrder}
            onCancelOrder={handleCancelOrder}
            onReturnOrder={handleReturnOrder}
            onPayout={handlePayout}
            onUpdateStatus={handleUpdateOrderStatus}
            findOrder={findOrder}
            findOrders={findOrders}
            loadOrdersButton={
              !ordersLoaded && (
                <Button onClick={handleLoadOrders} disabled={ordersLoadingManual}>
                  {ordersLoadingManual ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã'}
                </Button>
              )
            }
          />
        )}
      </AppLayout>
    );
  }

  if (initialUser.role === '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫') {
    return (
      <AppLayout currentUser={initialUser}>
        {() => (
          <PrinterDashboard
            currentUser={initialUser}
            productionOrders={productionOrders}
            allOrders={allOrders}
            isLoadingProduction={productionLoading}
            isLoadingAll={allOrdersLoading || allOrdersLoadingSWR}
            onUpdateStatus={handleUpdateOrderStatus}
            printerTab={printerTab}
            onTabChange={handlePrinterTabChange}
            loadOrdersButton={
              (printerTab === 'shipment' || printerTab === 'all') && !allOrdersLoaded && (
                <Button onClick={handleLoadAllOrders} disabled={allOrdersLoading}>
                  {allOrdersLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã'}
                </Button>
              )
            }
          />
        )}
      </AppLayout>
    );
  }

  if (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
    switch (activeView) {
      case 'admin-orders':
        return <AdminOrderList allOrders={allOrders} allUsers={users} />;
      case 'admin-expenses':
        return <ExpensesList 
                  allExpenses={expenses} 
                  allUsers={users} 
                  onAddExpense={handleAddExpense}
                  currentUser={initialUser}
                  debts={debts}
                  onDebtUpdate={handleDebtUpdate}
                />;
      case 'admin-payouts':
        return <PayoutsList 
                  allPayouts={payouts} 
                  allUsers={users} 
                  onUpdateStatus={handleUpdatePayoutStatus}
                  currentUser={initialUser}
                />;
      case 'admin-analytics':
        return <Analytics 
                  orders={allOrders} 
                  users={users} 
                  expenses={expenses} 
                  payouts={payouts} 
                />;
      case 'admin-ai-analytics':
         return <AIAnalytics orders={allOrders} expenses={expenses} />;
      default:
        return <AdminOrderList allOrders={allOrders} allUsers={users} />;
    }
  }
  return null;
}
