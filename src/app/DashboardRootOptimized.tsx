'use client';

import * as React from 'react';
import useSWR from 'swr';
import { Order, OrderStatus, User, Expense, Payout, PayoutStatus, Debt } from '@/lib/types';
import { useToast } from '@/hooks/use-toast';
import { AppLayout } from '@/components/layout/AppLayout';
import { Dashboard } from '@/components/dashboard/Dashboard';
import { PrinterDashboard } from '@/components/printer/PrinterDashboard';
import { AdminOrderList } from '@/components/admin/AdminOrderList';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { ExpensesList } from '@/components/admin/ExpensesList';
import { PayoutsList } from '@/components/admin/PayoutsList';
import AIAnalytics from '@/components/admin/AIAnalytics';
import { Analytics } from '@/components/admin/Analytics';
import { optimizedFetcher, swrConfig, cacheManager, getCacheStatus } from '@/lib/cache';
import { useOrders } from '@/hooks/useOrders';

type DashboardRootProps = {
  initialUser: Omit<User, 'password_hash'> | undefined;
}

export default function DashboardRootOptimized({ initialUser }: DashboardRootProps) {
  if (!initialUser) {
    return null;
  }

  const { toast } = useToast();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  React.useEffect(() => {
    const status = getCacheStatus();
    console.log('üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞:', status);
  }, []);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
  const {
    orders,
    ordersByStatus,
    readyOrders,
    loading: ordersLoading,
    error: ordersError,
    updateOrderStatus,
    addOrder,
    refresh: refreshOrders,
    cacheStatus
  } = useOrders({
    limit: initialUser.role === '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫' ? 200 : 100, // –ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞
    sortBy: 'orderDate',
    sortOrder: 'desc'
  });
  
  const { data: expenses = [], error: expensesError } = useSWR<Expense[]>(
    initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? '/api/expenses' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('expenses') || [],
    }
  );

  const { data: payouts = [], error: payoutsError } = useSWR<Payout[]>(
    (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' || initialUser.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') ? '/api/payouts' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('payouts') || [],
    }
  );

  const { data: debts = [], error: debtsError } = useSWR<Debt[]>(
    initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? '/api/debts' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('debts') || [],
    }
  );

  const { data: users = [], error: usersError } = useSWR<User[]>(
    initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ? '/api/users' : null, 
    optimizedFetcher,
    {
      ...swrConfig,
      fallbackData: cacheManager.get('users') || [],
    }
  );

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  React.useEffect(() => {
    if (ordersError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', ordersError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤', 
        description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', 
        variant: 'destructive' 
      });
    }
    if (expensesError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:', expensesError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤', 
        description: expensesError.message, 
        variant: 'destructive' 
      });
    }
    if (payoutsError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', payoutsError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤', 
        description: payoutsError.message, 
        variant: 'destructive' 
      });
    }
    if (debtsError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–≥–æ–≤:', debtsError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–≥–æ–≤', 
        description: debtsError.message, 
        variant: 'destructive' 
      });
    }
    if (usersError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      toast({ 
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 
        description: usersError.message, 
        variant: 'destructive' 
      });
    }
  }, [ordersError, expensesError, payoutsError, debtsError, usersError, toast]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –∫—ç—à–∞
  React.useEffect(() => {
    if (!ordersLoading && orders.length > 0) {
      const lastUpdate = cacheStatus.lastUpdate;
      const timeSinceUpdate = Date.now() - lastUpdate;
      
      if (timeSinceUpdate < 60000) { // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
        toast({
          title: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞',
          description: `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${Math.round(timeSinceUpdate / 1000)} —Å–µ–∫ –Ω–∞–∑–∞–¥`,
          duration: 3000,
        });
      }
    }
  }, [ordersLoading, orders.length, cacheStatus.lastUpdate, toast]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
  const handleAddOrder = async (newOrderData: Omit<Order, 'id' | 'orderDate' | 'seller'>) => {
    try {
      await addOrder(newOrderData);
      toast({
        title: '–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω',
        description: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É',
      });
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  };

  const handleUpdateOrderStatus = async (orderId: string, newStatus: OrderStatus) => {
    try {
      await updateOrderStatus(orderId, newStatus);
      toast({
        title: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
        description: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus}"`,
      });
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  };

  const handleCancelOrder = (orderNumber: string) => {
    const order = orders.find(o => o.orderNumber === orderNumber);
    if (order) {
      handleUpdateOrderStatus(order.id!, '–û—Ç–º–µ–Ω–µ–Ω');
    }
  };

  const handleReturnOrder = (orderNumber: string) => {
    const order = orders.find(o => o.orderNumber === orderNumber);
    if (order) {
      handleUpdateOrderStatus(order.id!, '–í–æ–∑–≤—Ä–∞—Ç');
    }
  };

  const handlePayout = async (orderNumbers: string[]) => {
    try {
      const response = await fetch('/api/payouts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ orderNumbers }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
      }

      toast({
        title: '–í—ã–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞',
        description: `–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è ${orderNumbers.length} –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      refreshOrders();
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  };

  const handleAddExpense = async (newExpenseData: Omit<Expense, 'id' | 'date'>) => {
    try {
      const response = await fetch('/api/expenses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newExpenseData),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞');
      }

      toast({
        title: '–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω',
        description: '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É',
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      window.location.reload();
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  };

  const handleDebtUpdate = () => {
    window.location.reload();
  };

  const handleUpdatePayoutStatus = async (payoutId: string, newStatus: PayoutStatus) => {
    try {
      const response = await fetch(`/api/payouts/${payoutId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã');
      }

      toast({
        title: '–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω',
        description: `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus}"`,
      });

      window.location.reload();
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive',
      });
    }
  };

  const findOrder = (orderNumber: string) => orders.find(o => o.orderNumber === orderNumber);
  const findOrders = (orderNumbers: string[]) => orders.filter(o => orderNumbers.includes(o.orderNumber));

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫
  const PlaceholderComponent = ({ title, description }: { title: string, description: string }) => (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex items-center justify-center h-32 text-muted-foreground">
          –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        </div>
      </CardContent>
    </Card>
  );

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const renderActiveView = (activeView: string) => {
    switch (activeView) {
      case 'orders':
        if (initialUser.role === '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫') {
          return (
            <PrinterDashboard
              currentUser={initialUser}
              onUpdateStatus={handleUpdateOrderStatus}
              allOrders={orders}
              isLoading={ordersLoading}
            />
          );
        } else if (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
          return (
            <AdminOrderList
              allOrders={orders}
              allUsers={users}
            />
          );
        } else {
          return (
            <Dashboard
              user={initialUser}
              orders={orders}
              isLoading={ordersLoading}
              onAddOrder={handleAddOrder}
              onCancelOrder={handleCancelOrder}
              onReturnOrder={handleReturnOrder}
              onPayout={handlePayout}
              onUpdateStatus={handleUpdateOrderStatus}
              findOrder={findOrder}
              findOrders={findOrders}
            />
          );
        }

      case 'expenses':
        if (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
          return (
            <ExpensesList
              expenses={expenses}
              onAddExpense={handleAddExpense}
              onDebtUpdate={handleDebtUpdate}
              debts={debts}
            />
          );
        }
        return <PlaceholderComponent title="–†–∞—Å—Ö–æ–¥—ã" description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏" />;

      case 'payouts':
        if (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' || initialUser.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
          return (
            <PayoutsList
              payouts={payouts}
              onUpdateStatus={handleUpdatePayoutStatus}
            />
          );
        }
        return <PlaceholderComponent title="–í—ã–ø–ª–∞—Ç—ã" description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏" />;

      case 'analytics':
        if (initialUser.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
          return (
            <div className="space-y-6">
              <Analytics orders={orders} expenses={expenses} payouts={payouts} />
              <AIAnalytics orders={orders} expenses={expenses} />
            </div>
          );
        }
        return <PlaceholderComponent title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" description="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" />;

      default:
        return <PlaceholderComponent title="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" description="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" />;
    }
  };

  return (
    <AppLayout currentUser={initialUser}>
      {renderActiveView}
    </AppLayout>
  );
} 