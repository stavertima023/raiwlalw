import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { supabaseAdmin } from '@/lib/supabaseClient';

export async function POST(request: NextRequest) {
  try {
    if (!supabaseAdmin) {
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }

    const session = await getSession();
    const { user } = session;

    if (!user || !session.isLoggedIn || user.role !== '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
      return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤—ã–≤–æ–¥–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–≤–æ–¥—ã
    const { data: payouts, error: payoutsError } = await supabaseAdmin
      .from('payouts')
      .select('*')
      .order('date', { ascending: false });

    if (payoutsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤: ${payoutsError.message}`);
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${payouts.length} –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    let updatedCount = 0;
    let skippedCount = 0;

    for (const payout of payouts) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤—ã–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        if (!payout.orderNumbers || !Array.isArray(payout.orderNumbers) || payout.orderNumbers.length === 0) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≤–æ–¥ ${payout.id} - –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤`);
          skippedCount++;
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
        const { data: orders, error: ordersError } = await supabaseAdmin
          .from('orders')
          .select('id, orderNumber, productType, price, size, status, orderDate')
          .in('orderNumber', payout.orderNumbers);

        if (ordersError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ ${payout.id}:`, ordersError);
          skippedCount++;
          continue;
        }

        if (!orders || orders.length === 0) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≤–æ–¥ ${payout.id} - –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
          skippedCount++;
          continue;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
        const productTypeStats: Record<string, number> = {};
        let totalAmount = 0;

        orders.forEach(order => {
          productTypeStats[order.productType] = (productTypeStats[order.productType] || 0) + 1;
          totalAmount += order.price;
        });

        const orderCount = orders.length;
        const averageCheck = totalAmount > 0 ? totalAmount / orderCount : 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–≤–æ–¥ —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const { error: updateError } = await supabaseAdmin
          .from('payouts')
          .update({
            orderCount,
            averageCheck: Math.round(averageCheck * 100) / 100, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
            productTypeStats
          })
          .eq('id', payout.id);

        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ ${payout.id}:`, updateError);
          skippedCount++;
          continue;
        }

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤—ã–≤–æ–¥ ${payout.id}: ${orderCount} –∑–∞–∫–∞–∑–æ–≤, ${Object.keys(productTypeStats).length} —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤`);
        updatedCount++;

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 100));

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${payout.id}:`, error);
        skippedCount++;
      }
    }

    console.log(`üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount}`);

    return NextResponse.json({
      success: true,
      message: '–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      stats: {
        totalPayouts: payouts.length,
        updatedCount,
        skippedCount
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–≤',
      error: error.message
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    if (!supabaseAdmin) {
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }

    const session = await getSession();
    const { user } = session;

    if (!user || !session.isLoggedIn || user.role !== '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
      return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ - —Å–∫–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–æ–≤ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    const { data: payouts, error: payoutsError } = await supabaseAdmin
      .from('payouts')
      .select('id, orderNumbers, productTypeStats, orderCount, averageCheck');

    if (payoutsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤: ${payoutsError.message}`);
    }

    const needsUpdate = payouts.filter(payout => 
      payout.orderNumbers && 
      Array.isArray(payout.orderNumbers) && 
      payout.orderNumbers.length > 0 && 
      (!payout.productTypeStats || Object.keys(payout.productTypeStats || {}).length === 0)
    );

    const alreadyMigrated = payouts.filter(payout => 
      payout.productTypeStats && 
      Object.keys(payout.productTypeStats).length > 0
    );

    return NextResponse.json({
      totalPayouts: payouts.length,
      needsUpdate: needsUpdate.length,
      alreadyMigrated: alreadyMigrated.length,
      ready: needsUpdate.length > 0
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return NextResponse.json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞',
      error: error.message
    }, { status: 500 });
  }
}
