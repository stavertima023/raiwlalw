import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabaseClient';
import { getSession } from '@/lib/session';

export async function PATCH(
  req: NextRequest,
  { params }: { params: { orderId: string } }
) {
  console.log('üîÑ PATCH /api/orders/[orderId]/printer-check - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    const session = await getSession();
    if (!session.isLoggedIn || !session.user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json(
        { error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (session.user.role !== '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫') {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, —Ä–æ–ª—å:', session.user.role);
      return NextResponse.json(
        { error: '–¢–æ–ª—å–∫–æ –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º orderId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const orderId = params.orderId;
    console.log('üìã ID –∑–∞–∫–∞–∑–∞:', orderId);

    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const body = await req.json();
    const { checked } = body;

    if (typeof checked !== 'boolean') {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è checked:', typeof checked);
      return NextResponse.json(
        { error: '–ü–æ–ª–µ checked –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º' },
        { status: 400 }
      );
    }

    console.log('‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞', orderId, '–Ω–∞:', checked);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabaseAdmin
      .from('orders')
      .update({ printerChecked: checked })
      .eq('id', orderId)
      .select('id, orderNumber, printerChecked')
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:', error);
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –∑–∞–∫–∞–∑–∞', details: error.message },
        { status: 500 }
      );
    }

    if (!data) {
      console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderId);
      return NextResponse.json(
        { error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    console.log('‚úÖ –û—Ç–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);

    return NextResponse.json({
      success: true,
      message: '–û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      order: data
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ PATCH /api/orders/[orderId]/printer-check:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
