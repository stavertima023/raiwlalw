import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { supabaseAdmin } from '@/lib/supabaseClient';

export const maxDuration = 30;
export const dynamic = 'force-dynamic';

export async function GET(
  request: NextRequest,
  { params }: { params: { orderId: string } }
) {
  try {
    console.log(`üì∏ –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞: ${params.orderId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
    if (!supabaseAdmin) {
      console.error('‚ùå SupabaseAdmin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    let session;
    try {
      session = await getSession();
      console.log('üìã –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', { 
        isLoggedIn: session.isLoggedIn, 
        hasUser: !!session.user,
        userRole: session.user?.role 
      });
    } catch (sessionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError);
      return NextResponse.json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' }, { status: 401 });
    }

    const { user } = session;

    if (!user || !session.isLoggedIn) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', { username: user.username, role: user.role });

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –º–∞—Å—Å–∏–≤ URL)
    console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (URL) –¥–ª—è –∑–∞–∫–∞–∑–∞ ${params.orderId}...`);
    const { data, error } = await supabaseAdmin
      .from('orders')
      .select('photos')
      .eq('id', params.orderId)
      .single();

    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ ${params.orderId}:`, error);
      return NextResponse.json({ 
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        error: error.message 
      }, { status: 404 });
    }

    console.log(`üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ ${params.orderId}:`, {
      hasData: !!data,
      hasPhotos: !!data?.photos,
      photosCount: data?.photos?.length || 0
    });

    if (!data || !data.photos) {
      console.log(`üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞: ${params.orderId}`);
      return NextResponse.json({ thumbnails: [], fullPhotos: [] });
    }

    console.log(`‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (URL) –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ ${params.orderId}: ${data.photos.length} —à—Ç.`);
    // –ù–∞ –∫–ª–∏–µ–Ω—Ç–µ –æ–∂–∏–¥–∞—é—Ç—Å—è —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã. –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ URL.
    const urls: string[] = data.photos;
    const thumbnails = urls.map((u) => ({ type: 'thumbnail', data: u, size: 'url' }));
    const fullPhotos = urls.map((u) => ({ type: 'full', data: u, size: 'url' }));
    return NextResponse.json({ thumbnails, fullPhotos });
    
  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
    return NextResponse.json({ 
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', 
      error: error.message
    }, { status: 500 });
  }
} 