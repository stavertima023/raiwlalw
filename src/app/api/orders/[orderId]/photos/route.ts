import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { supabaseAdmin } from '@/lib/supabaseClient';
import { createThumbnailsServer } from '@/lib/imageUtilsServer';

export const maxDuration = 60;
export const dynamic = 'force-dynamic';

export async function GET(
  request: NextRequest,
  { params }: { params: { orderId: string } }
) {
  try {
    console.log('üñºÔ∏è –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞ /api/orders/[orderId]/photos');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
    if (!supabaseAdmin) {
      console.error('‚ùå SupabaseAdmin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await getSession();
    const { user } = session;

    if (!user || !session.isLoggedIn) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const { orderId } = params;
    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type') || 'full'; // 'thumbnails' –∏–ª–∏ 'full'

    console.log(`üì∏ –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}, —Ç–∏–ø: ${type}, —Ä–æ–ª—å: ${user.role}`);

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    const { data: order, error } = await supabaseAdmin
      .from('orders')
      .select('id, photos, seller')
      .eq('id', orderId)
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      return NextResponse.json({ 
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 
        error: error.message 
      }, { status: 404 });
    }

    if (!order) {
      console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (user.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü' && order.seller !== user.username) {
      console.error('‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É');
      return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    const photos = order.photos || [];

    if (type === 'thumbnails') {
      // –°–æ–∑–¥–∞–µ–º thumbnails –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      console.log(`üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ thumbnails –¥–ª—è ${photos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...`);
      
      try {
        const thumbnails = await createThumbnailsServer(photos, 150, 150, 70);
        
        const thumbnailData = thumbnails.map((thumbnail, index) => ({
          type: 'thumbnail',
          data: thumbnail,
          size: '150x150',
          originalIndex: index
        }));

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${thumbnailData.length} thumbnails –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
        return NextResponse.json({ thumbnails: thumbnailData });
      } catch (thumbnailError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thumbnails:', thumbnailError);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const fallbackThumbnails = photos.map((photo: string, index: number) => ({
          type: 'thumbnail',
          data: photo,
          size: 'original',
          originalIndex: index
        }));
        return NextResponse.json({ thumbnails: fallbackThumbnails });
      }
    } else {
      // –î–ª—è full-size –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      const fullPhotos = photos.map((photo: string, index: number) => ({
        type: 'full',
        data: photo,
        size: 'original',
        originalIndex: index
      }));

      console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${fullPhotos.length} full-size —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
      return NextResponse.json({ fullPhotos });
    }

  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
    return NextResponse.json({ 
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', 
      error: error.message
    }, { status: 500 });
  }
} 