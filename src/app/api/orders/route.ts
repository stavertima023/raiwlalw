import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { supabaseAdmin } from '@/lib/supabaseClient';
import { OrderSchema } from '@/lib/types';
import { uploadBase64ToStorage } from '@/lib/storage';
import { cleanImageArray } from '@/lib/imageUtils';

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ API
export const maxDuration = 120; // 120 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 90)
export const dynamic = 'force-dynamic';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
const isMobile = (userAgent: string) => {
  return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
};

export async function GET(request: NextRequest) {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞ /api/orders');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
    if (!supabaseAdmin) {
      console.error('‚ùå SupabaseAdmin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }
    console.log('‚úÖ SupabaseAdmin –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    let session;
    try {
      session = await getSession();
      console.log('üìã –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', { 
        isLoggedIn: session.isLoggedIn, 
        hasUser: !!session.user,
        userRole: session.user?.role 
      });
    } catch (sessionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError);
      return NextResponse.json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' }, { status: 401 });
    }

    const { user } = session;

    if (!user || !session.isLoggedIn) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', { username: user.username, role: user.role });

    // –ü–æ–ª—É—á–∞–µ–º User-Agent –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const userAgent = request.headers.get('user-agent') || '';
    const mobile = isMobile(userAgent);

    console.log(`üì± –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ —Å ${mobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ'} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–æ–ª–∏: ${user.role}`);

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let selectFields;
    if (user.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
      // –î–ª—è –∞–¥–º–∏–Ω–∞ –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ–æ–±—â–µ
      selectFields = 'id, orderDate, orderNumber, shipmentNumber, status, productType, size, seller, price, cost, comment, ready_at, printerChecked';
    } else if (user.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
      // –î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 –∑–∞–ø–∏—Å–µ–π
      selectFields = 'id, orderDate, orderNumber, shipmentNumber, status, productType, size, seller, price, cost, photos, comment, ready_at, printerChecked';
    } else {
      // –î–ª—è –ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤—Å–µ —Ñ–æ—Ç–æ)
      selectFields = 'id, orderDate, orderNumber, shipmentNumber, status, productType, size, seller, price, cost, photos, comment, ready_at, printerChecked';
    }
    
    let query = supabaseAdmin
      .from('orders')
      .select(selectFields)
      .order('orderDate', { ascending: false });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ–ª–∏
    if (user.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
      query = query.eq('seller', user.username);
      console.log(`üìä –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞: ${user.username}`);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
    if (user.role === '–ü—Ä–∏–Ω—Ç–æ–≤—â–∏–∫') {
      query = query.limit(200);
      console.log(`üìä –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 200 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è ${user.role}`);
    } else if (user.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
      query = query.limit(200);
      console.log(`üìä –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 200 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è ${user.role}`);
    } else if (user.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
      // –î–ª—è –∞–¥–º–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
      console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)`);
    } else {
      console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è ${user.role}`);
    }
    
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –ù–µ–±–æ–ª—å—à–∞—è –æ–±–µ—Ä—Ç–∫–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ–±—Ä—ã–≤–æ–≤ (terminated/ECONNRESET)
    const retry = async <T>(fn: () => Promise<T>, attempts = 2): Promise<T> => {
      let lastErr: any = null;
      for (let i = 0; i <= attempts; i += 1) {
        try {
          return await fn();
        } catch (e: any) {
          lastErr = e;
          const msg = String(e?.message || e);
          if (/(terminated|ECONNRESET|socket hang up|fetch failed|network)/i.test(msg) && i < attempts) {
            await new Promise(r => setTimeout(r, 400 * (i + 1)));
            continue;
          }
          break;
        }
      }
      throw lastErr;
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    let result;
    try {
      result = await retry(() => query as unknown as Promise<any>, 2);
    } catch (queryError: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', queryError);
      return NextResponse.json({ 
        message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 
        error: queryError instanceof Error ? queryError.message : 'Unknown error'
      }, { status: 500 });
    }

    const { data, error } = result;

    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è ${user.role}:`, error);
      return NextResponse.json({ 
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤', 
        error: error.message 
      }, { status: 500 });
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!data) {
      console.log(`üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${user.role}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
      return NextResponse.json([]);
    }

    if (!Array.isArray(data)) {
      console.log(`üìä –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è ${user.role}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
      return NextResponse.json([]);
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
    let parsedData = data.map((item: any) => {
      try {
        return {
          ...item, 
          orderDate: new Date(item.orderDate)
        };
      } catch (dateError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:', item.id, dateError);
        return {
          ...item, 
          orderDate: new Date()
        };
      }
    });

    // –î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ —É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 –∑–∞–∫–∞–∑–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ 150 ‚Äî –±–µ–∑ —Ñ–æ—Ç–æ
    if (user.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
      const withPhotos = new Set(parsedData.slice(0, 50).map((o: any) => o.id));
      parsedData = parsedData.map((o: any) => ({
        ...o,
        photos: withPhotos.has(o.id) ? o.photos : [],
      }));
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã: ${parsedData.length} —à—Ç. –¥–ª—è ${user.role}`);
    return NextResponse.json(parsedData);
    
  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –∑–∞–∫–∞–∑–æ–≤:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      code: error.code,
      details: error.details,
      hint: error.hint
    });
    
    return NextResponse.json({ 
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤', 
      error: error.message
    }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    if (!supabaseAdmin) {
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }

    const session = await getSession();
    const { user } = session;

    if (!user || !session.isLoggedIn) {
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (—É–º–µ–Ω—å—à–µ–Ω –¥–æ 10MB)
    const contentLength = request.headers.get('content-length');
    if (contentLength) {
      const sizeInMB = parseInt(contentLength) / (1024 * 1024);
      if (sizeInMB > 10) { // 10MB –ª–∏–º–∏—Ç (—É–º–µ–Ω—å—à–µ–Ω —Å 15MB)
        return NextResponse.json({ 
          message: '–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)', 
          error: `–†–∞–∑–º–µ—Ä: ${sizeInMB.toFixed(2)}MB`
        }, { status: 413 });
      }
    }

    const json = await request.json();
    
    // –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    if (json.photos && Array.isArray(json.photos)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      const totalPhotoSize = json.photos.reduce((total: number, photo: string) => {
        if (photo && typeof photo === 'string') {
          const base64Data = photo.split(',')[1];
          if (base64Data) {
            return total + Math.ceil((base64Data.length * 3) / 4);
          }
        }
        return total;
      }, 0);

      const totalSizeInMB = totalPhotoSize / (1024 * 1024);
      if (totalSizeInMB > 4) { // 4MB –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—É–º–µ–Ω—å—à–µ–Ω —Å 6MB)
        return NextResponse.json({ 
          message: '–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 4MB)', 
          error: `–†–∞–∑–º–µ—Ä: ${totalSizeInMB.toFixed(2)}MB`,
          recommendation: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
        }, { status: 413 });
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      for (let i = 0; i < json.photos.length; i++) {
        const photo = json.photos[i];
        if (photo && typeof photo === 'string') {
          const base64Data = photo.split(',')[1];
          if (base64Data) {
            const photoSize = Math.ceil((base64Data.length * 3) / 4);
            const photoSizeInMB = photoSize / (1024 * 1024);
            
            if (photoSizeInMB > 1.5) { // 1.5MB –ª–∏–º–∏—Ç –¥–ª—è –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—É–º–µ–Ω—å—à–µ–Ω —Å 2MB)
              return NextResponse.json({ 
                message: `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ${i + 1} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 1.5MB)`, 
                error: `–†–∞–∑–º–µ—Ä: ${photoSizeInMB.toFixed(2)}MB`,
                recommendation: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π'
              }, { status: 413 });
            }
          }
        }
      }

      json.photos = cleanImageArray(json.photos);
      if (json.photos.length === 0) {
        console.warn('–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ');
        json.photos = [];
      }
    } else {
      // –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      json.photos = [];
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞
    const newOrderData = {
      ...json,
      seller: user.username,
      orderDate: new Date().toISOString(),
    };
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Zod
    const validatedOrder = OrderSchema.omit({ id: true }).parse(newOrderData);

    // 1) –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    const { photos: base64Photos, ...rest } = validatedOrder as any;
    const { data: created, error: createError } = await supabaseAdmin
      .from('orders')
      .insert({ ...rest, photos: [] })
      .select('id, seller, orderDate, orderNumber, shipmentNumber, status, productType, size, price, cost, comment, ready_at, printerChecked')
      .single();
    if (createError) throw createError;

    // 2) –ï—Å–ª–∏ –±—ã–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage, —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ orders.photos
    if (Array.isArray(base64Photos) && base64Photos.length > 0) {
      const uploaded: string[] = [];
      let index = 0;
      for (const b64 of base64Photos) {
        try {
          const result = await uploadBase64ToStorage({
            base64: b64,
            orderId: created.id,
            seller: user.username,
            index,
          });
          uploaded.push(result.publicUrl);
          index += 1;
        } catch (e) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ Storage:', e);
        }
      }
      if (uploaded.length > 0) {
        const { error: updatePhotosError } = await supabaseAdmin
          .from('orders')
          .update({ photos: uploaded })
          .eq('id', created.id);
        if (updatePhotosError) throw updatePhotosError;
      }
    }

    // Note: remove stray error rethrow; all errors above are handled explicitly

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    const { data: finalRow } = await supabaseAdmin
      .from('orders')
      .select('*')
      .eq('id', created.id)
      .single();
    const result = { ...finalRow, orderDate: new Date(finalRow.orderDate) };

    return NextResponse.json(result, { status: 201 });

  } catch (error: any) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod
    if (error.name === 'ZodError') {
      const errorDetails = error.errors.map((err: any) => {
        const field = err.path.join('.');
        const message = err.message;
        return `${field}: ${message}`;
      }).join(', ');
      
      return NextResponse.json({ 
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 
        error: errorDetails,
        errors: error.errors
      }, { status: 400 });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ Supabase
    if (error.code) {
      return NextResponse.json({ 
        message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 
        error: error.message,
        code: error.code
      }, { status: 500 });
    }
    
    return NextResponse.json({ 
      message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 
      error: error.message || 'Unknown error'
    }, { status: 500 });
  }
} 