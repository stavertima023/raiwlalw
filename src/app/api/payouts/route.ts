import { NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { supabaseAdmin } from '@/lib/supabaseClient';
import { PayoutSchema } from '@/lib/types';

export async function GET() {
  try {
    if (!supabaseAdmin) {
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }

    const session = await getSession();
    const { user } = session;

    if (!user || !session.isLoggedIn) {
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    // Both admins and sellers can view payouts
    if (user.role !== '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' && user.role !== '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
      return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    let query = supabaseAdmin
      .from('payouts')
      .select('*')
      .order('date', { ascending: false })
      .limit(200); // –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

    // Sellers can only see their own payouts
    if (user.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
      query = query.eq('processedBy', user.username);
    }

    const { data, error } = await query;

    if (error) {
      throw error;
    }

    // Parse dates before sending to client
    const parsedData = data.map(item => ({
      ...item,
      date: new Date(item.date)
    }));

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
    if (user.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const allOrderNumbers = parsedData.reduce((acc, payout) => {
        if (payout.orderNumbers && Array.isArray(payout.orderNumbers)) {
          acc.push(...payout.orderNumbers);
        }
        return acc;
      }, [] as string[]);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let ordersStats: any[] = [];
      if (allOrderNumbers.length > 0) {
        const { data: orders, error: ordersError } = await supabaseAdmin!
          .from('orders')
          .select('id, orderNumber, productType, price, size, status, orderDate')
          .in('orderNumber', allOrderNumbers);

        if (ordersError) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', ordersError);
        } else {
          ordersStats = orders || [];
        }
      }

      // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É
      const ordersMap = new Map();
      ordersStats.forEach(order => {
        ordersMap.set(order.orderNumber, order);
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤—ã–ø–ª–∞—Ç—É
      const payoutsWithStats = parsedData.map((payout) => {
        const orderCount = payout.orderNumbers?.length || 0;
        const averageCheck = orderCount > 0 ? payout.amount / orderCount : 0;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑—ã
        const productTypeStats: Record<string, number> = {};
        let totalAmount = 0;
        const orders: any[] = [];
        
        if (payout.orderNumbers) {
          payout.orderNumbers.forEach((orderNumber: string) => {
            const order = ordersMap.get(orderNumber);
            if (order) {
              productTypeStats[order.productType] = (productTypeStats[order.productType] || 0) + 1;
              totalAmount += order.price;
              orders.push(order);
            }
          });
        }
        
        return {
          ...payout,
          orderCount,
          averageCheck: totalAmount > 0 ? totalAmount / orderCount : averageCheck,
          productTypeStats,
          // –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ—Ç–∞–ª—è—Ö
          orders,
        };
      });

      return NextResponse.json(payoutsWithStats);
    }

    return NextResponse.json(parsedData);
  } catch (error: any) {
    console.error('GET /api/payouts error:', error);
    return NextResponse.json({ 
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤', 
      error: error.message 
    }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    if (!supabaseAdmin) {
      return NextResponse.json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 });
    }

    const session = await getSession();
    const { user } = session;

    if (!user || !session.isLoggedIn) {
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    // Both admins and sellers can create payouts
    if (user.role !== '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' && user.role !== '–ü—Ä–æ–¥–∞–≤–µ—Ü') {
      return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    const json = await request.json();
    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã:', json);
    
    const { orderNumbers, ...otherData } = json;

    // If user is a seller, verify they own all the orders
    if (user.role === '–ü—Ä–æ–¥–∞–≤–µ—Ü' && orderNumbers && orderNumbers.length > 0) {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞:', orderNumbers);
      
      const { data: orders, error: ordersError } = await supabaseAdmin
        .from('orders')
        .select('orderNumber, seller, status')
        .in('orderNumber', orderNumbers);

      if (ordersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', ordersError);
        throw ordersError;
      }

      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', orders);

      // Check if all orders belong to the seller and are eligible for payout
      const invalidOrders = orders.filter(order => 
        order.seller !== user.username || 
        (order.status !== '–ì–æ—Ç–æ–≤' && order.status !== '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω')
      );

      if (invalidOrders.length > 0) {
        console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', invalidOrders);
        return NextResponse.json({ 
          message: '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ì–æ—Ç–æ–≤" –∏–ª–∏ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"',
          invalidOrders: invalidOrders.map(o => o.orderNumber)
        }, { status: 403 });
      }

      // Update the orders status to "–ò—Å–ø–æ–ª–Ω–µ–Ω" when payout is created by seller
      const { error: updateError } = await supabaseAdmin
        .from('orders')
        .update({ status: '–ò—Å–ø–æ–ª–Ω–µ–Ω' })
        .in('orderNumber', orderNumbers);

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤:', updateError);
        // Don't fail the payout creation, just log the error
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–ò—Å–ø–æ–ª–Ω–µ–Ω"');
      }
    }
    
    // Add processed by user and current date
    const payoutData = {
      ...json,
      processedBy: user.username,
      date: new Date().toISOString(),
      status: 'pending', // All payouts start as pending
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', payoutData);
    
    // Validate data with Zod schema
    const validatedPayout = PayoutSchema.omit({ id: true }).parse(payoutData);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é:', validatedPayout);

    const { data, error } = await supabaseAdmin
      .from('payouts')
      .insert(validatedPayout)
      .select()
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã –≤ –ë–î:', error);
      throw error;
    }

    console.log('‚úÖ –í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', data);
    return NextResponse.json(data, { status: 201 });
  } catch (error: any) {
    if (error.name === 'ZodError') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod:', error.errors);
      return NextResponse.json({ 
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 
        errors: error.errors 
      }, { status: 400 });
    }
    
    console.error('‚ùå POST /api/payouts error:', error);
    return NextResponse.json({ 
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞', 
      error: error.message 
    }, { status: 500 });
  }
} 