'use client';

import * as React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Debt, User } from '@/lib/types';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { DollarSign, CreditCard, RefreshCw, Database, History, AlertCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { PayDebtDialog } from './PayDebtDialog';
import { DebtHistoryDialog } from './DebtHistoryDialog';

interface SimpleDebtsSectionProps {
  debts: Debt[];
  currentUser: Omit<User, 'password_hash'>;
  onDebtUpdate: () => void;
}

export function SimpleDebtsSection({ debts, currentUser, onDebtUpdate }: SimpleDebtsSectionProps) {
  const [isInitializing, setIsInitializing] = React.useState(false);
  const [isRefreshing, setIsRefreshing] = React.useState(false);
  const [selectedDebt, setSelectedDebt] = React.useState<Debt | null>(null);
  const [showPayDialog, setShowPayDialog] = React.useState(false);
  const [showHistoryDialog, setShowHistoryDialog] = React.useState(false);
  const { toast } = useToast();

  const handleInitializeDebts = async () => {
    setIsInitializing(true);
    try {
      const response = await fetch('/api/debts/init', {
        method: 'POST',
      });
      
      if (!response.ok) {
        throw new Error('Failed to initialize debts');
      }
      
      onDebtUpdate();
      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–¢–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤ —Å–æ–∑–¥–∞–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.',
      });
    } catch (error) {
      console.error('Error initializing debts:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤.',
        variant: 'destructive',
      });
    } finally {
      setIsInitializing(false);
    }
  };

  const handleRefreshDebts = async () => {
    setIsRefreshing(true);
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤...');
      const response = await fetch('/api/debts/update', {
        method: 'POST',
      });
      
      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
        throw new Error(`Failed to update debts: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result);
      
      onDebtUpdate();
      const debtAmount = result.calculation.–¢–∏–º–æ—Ñ–µ–π || 0;
      const details = result.details;
      
      let description = `–û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: ${debtAmount.toLocaleString('ru-RU')} ‚ÇΩ`;
      
      if (details) {
        description += ` (–†–∞—Å—Ö–æ–¥—ã: ${details.totalExpenses?.toLocaleString('ru-RU') || 0} ‚ÇΩ, –ü–ª–∞—Ç–µ–∂–∏: ${details.totalPayments?.toLocaleString('ru-RU') || 0} ‚ÇΩ)`;
      }
      
      toast({
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
        description: description,
      });
    } catch (error) {
      console.error('‚ùå Error refreshing debts:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–≥–æ–≤.',
        variant: 'destructive',
      });
    } finally {
      setIsRefreshing(false);
    }
  };



  const handlePayDebt = (debt: Debt) => {
    if (debt.is_temporary) {
      toast({
        title: '–í–Ω–∏–º–∞–Ω–∏–µ',
        description: '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.',
        variant: 'destructive',
      });
      return;
    }
    
    setSelectedDebt(debt);
    setShowPayDialog(true);
  };

  const handleViewHistory = (debt: Debt) => {
    if (debt.is_temporary) {
      toast({
        title: '–í–Ω–∏–º–∞–Ω–∏–µ',
        description: '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–æ–ª–≥–æ–≤.',
        variant: 'destructive',
      });
      return;
    }
    
    setSelectedDebt(debt);
    setShowHistoryDialog(true);
  };

  const handlePaymentSuccess = () => {
    setShowPayDialog(false);
    onDebtUpdate();
    toast({
      title: '–£—Å–ø–µ—à–Ω–æ',
      description: '–ü–ª–∞—Ç–µ–∂ –ø–æ –¥–æ–ª–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.',
    });
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–ª–≥–∏ (–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
  const hasRealDebts = debts.some(debt => !debt.is_temporary);

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <CreditCard className="h-5 w-5" />
              –û—Å—Ç–∞—Ç–æ–∫
            </CardTitle>
            <div className="flex gap-2">
              <Button
                onClick={handleRefreshDebts}
                disabled={isRefreshing}
                variant="outline"
                size="sm"
              >
                <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />
                {isRefreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
              </Button>
              {!hasRealDebts && (
                <Button
                  onClick={handleInitializeDebts}
                  disabled={isInitializing}
                  variant="outline"
                  size="sm"
                >
                  <Database className="h-4 w-4 mr-2" />
                  {isInitializing ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã'}
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {debts.length > 0 ? (
              debts.map((debt) => (
                <Card key={debt.id} className="p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold text-lg">–û—Å—Ç–∞—Ç–æ–∫</h3>
                    <div className="flex items-center gap-2">
                      <Badge 
                        variant={debt.current_amount > 0 ? 'default' : 'success'}
                        className="text-sm"
                      >
                        {debt.current_amount > 0 ? '–ï—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫' : '–ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞'}
                      </Badge>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <div className="text-2xl font-bold text-blue-600">
                      {debt.current_amount.toLocaleString('ru-RU')} ‚ÇΩ
                    </div>
                    <p className="text-sm text-muted-foreground">
                      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {format(new Date(debt.updated_at), 'dd.MM.yyyy HH:mm', { locale: ru })}
                    </p>
                  </div>

                  <div className="flex gap-2">
                    <Button
                      onClick={() => handlePayDebt(debt)}
                      disabled={debt.current_amount <= 0}
                      size="sm"
                      className="flex-1"
                    >
                      <DollarSign className="h-4 w-4 mr-2" />
                      –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥
                    </Button>
                    <Button
                      onClick={() => handleViewHistory(debt)}
                      variant="outline"
                      size="sm"
                    >
                      <History className="h-4 w-4 mr-2" />
                      –ü–ª–∞—Ç–µ–∂–∏ –ø–æ –¥–æ–ª–≥—É
                    </Button>
                  </div>
                </Card>
              ))
            ) : (
              <div className="col-span-2 text-center py-8">
                <CreditCard className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-semibold mb-2">–û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
                <p className="text-muted-foreground mb-4">
                  –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞.
                </p>
                <Button onClick={handleRefreshDebts} variant="outline">
                  –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </Button>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {selectedDebt && (
        <>
          <PayDebtDialog
            debt={selectedDebt}
            currentUser={currentUser}
            isOpen={showPayDialog}
            onClose={() => setShowPayDialog(false)}
            onSuccess={handlePaymentSuccess}
          />
          
          <DebtHistoryDialog
            debt={selectedDebt}
            isOpen={showHistoryDialog}
            onClose={() => setShowHistoryDialog(false)}
          />
        </>
      )}
    </div>
  );
} 